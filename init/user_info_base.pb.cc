// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_info_base.proto

#include "user_info_base.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ssp {
constexpr UserInfoBase::UserInfoBase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nick_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ver_(0u)
  , user_id_(0u)
  , reg_time_(0u)
  , from_(0u)
  , login_time_(0u)
  , last_login_time_(0u)
  , fresh_time_(0u){}
struct UserInfoBaseDefaultTypeInternal {
  constexpr UserInfoBaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserInfoBaseDefaultTypeInternal() {}
  union {
    UserInfoBase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserInfoBaseDefaultTypeInternal _UserInfoBase_default_instance_;
}  // namespace ssp
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_user_5finfo_5fbase_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_user_5finfo_5fbase_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_user_5finfo_5fbase_2eproto = nullptr;

const uint32_t TableStruct_user_5finfo_5fbase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ssp::UserInfoBase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ssp::UserInfoBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ssp::UserInfoBase, ver_),
  PROTOBUF_FIELD_OFFSET(::ssp::UserInfoBase, user_id_),
  PROTOBUF_FIELD_OFFSET(::ssp::UserInfoBase, user_name_),
  PROTOBUF_FIELD_OFFSET(::ssp::UserInfoBase, nick_name_),
  PROTOBUF_FIELD_OFFSET(::ssp::UserInfoBase, reg_time_),
  PROTOBUF_FIELD_OFFSET(::ssp::UserInfoBase, from_),
  PROTOBUF_FIELD_OFFSET(::ssp::UserInfoBase, login_time_),
  PROTOBUF_FIELD_OFFSET(::ssp::UserInfoBase, last_login_time_),
  PROTOBUF_FIELD_OFFSET(::ssp::UserInfoBase, fresh_time_),
  2,
  3,
  0,
  1,
  4,
  5,
  6,
  7,
  8,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, -1, sizeof(::ssp::UserInfoBase)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ssp::_UserInfoBase_default_instance_),
};

const char descriptor_table_protodef_user_5finfo_5fbase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024user_info_base.proto\022\003ssp\"\330\002\n\014UserInfo"
  "Base\022\020\n\003ver\030\001 \001(\rH\000\210\001\001\022\024\n\007user_id\030\002 \001(\rH"
  "\001\210\001\001\022\026\n\tuser_name\030\003 \001(\tH\002\210\001\001\022\026\n\tnick_nam"
  "e\030\004 \001(\tH\003\210\001\001\022\025\n\010reg_time\030\005 \001(\rH\004\210\001\001\022\021\n\004f"
  "rom\030\006 \001(\rH\005\210\001\001\022\027\n\nlogin_time\030\007 \001(\rH\006\210\001\001\022"
  "\034\n\017last_login_time\030\010 \001(\rH\007\210\001\001\022\027\n\nfresh_t"
  "ime\030\t \001(\rH\010\210\001\001B\006\n\004_verB\n\n\010_user_idB\014\n\n_u"
  "ser_nameB\014\n\n_nick_nameB\013\n\t_reg_timeB\007\n\005_"
  "fromB\r\n\013_login_timeB\022\n\020_last_login_timeB"
  "\r\n\013_fresh_timeb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_user_5finfo_5fbase_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_5finfo_5fbase_2eproto = {
  false, false, 382, descriptor_table_protodef_user_5finfo_5fbase_2eproto, "user_info_base.proto", 
  &descriptor_table_user_5finfo_5fbase_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_user_5finfo_5fbase_2eproto::offsets,
  file_level_metadata_user_5finfo_5fbase_2eproto, file_level_enum_descriptors_user_5finfo_5fbase_2eproto, file_level_service_descriptors_user_5finfo_5fbase_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_user_5finfo_5fbase_2eproto_getter() {
  return &descriptor_table_user_5finfo_5fbase_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_user_5finfo_5fbase_2eproto(&descriptor_table_user_5finfo_5fbase_2eproto);
namespace ssp {

// ===================================================================

class UserInfoBase::_Internal {
 public:
  using HasBits = decltype(std::declval<UserInfoBase>()._has_bits_);
  static void set_has_ver(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nick_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reg_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_login_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_last_login_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_fresh_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

UserInfoBase::UserInfoBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ssp.UserInfoBase)
}
UserInfoBase::UserInfoBase(const UserInfoBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_name()) {
    user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name(), 
      GetArenaForAllocation());
  }
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nick_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nick_name()) {
    nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&fresh_time_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(fresh_time_));
  // @@protoc_insertion_point(copy_constructor:ssp.UserInfoBase)
}

inline void UserInfoBase::SharedCtor() {
user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nick_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ver_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fresh_time_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(fresh_time_));
}

UserInfoBase::~UserInfoBase() {
  // @@protoc_insertion_point(destructor:ssp.UserInfoBase)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserInfoBase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nick_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserInfoBase::ArenaDtor(void* object) {
  UserInfoBase* _this = reinterpret_cast< UserInfoBase* >(object);
  (void)_this;
}
void UserInfoBase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserInfoBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserInfoBase::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.UserInfoBase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      nick_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_login_time_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(last_login_time_));
  }
  fresh_time_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfoBase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ver(&has_bits);
          ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string user_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssp.UserInfoBase.user_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string nick_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ssp.UserInfoBase.nick_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 reg_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_reg_time(&has_bits);
          reg_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 from = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_from(&has_bits);
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 login_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_login_time(&has_bits);
          login_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_login_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_last_login_time(&has_bits);
          last_login_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fresh_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_fresh_time(&has_bits);
          fresh_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserInfoBase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssp.UserInfoBase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint32 ver = 1;
  if (_internal_has_ver()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ver(), target);
  }

  // optional uint32 user_id = 2;
  if (_internal_has_user_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_id(), target);
  }

  // optional string user_name = 3;
  if (_internal_has_user_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ssp.UserInfoBase.user_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_name(), target);
  }

  // optional string nick_name = 4;
  if (_internal_has_nick_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name().data(), static_cast<int>(this->_internal_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ssp.UserInfoBase.nick_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nick_name(), target);
  }

  // optional uint32 reg_time = 5;
  if (_internal_has_reg_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_reg_time(), target);
  }

  // optional uint32 from = 6;
  if (_internal_has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_from(), target);
  }

  // optional uint32 login_time = 7;
  if (_internal_has_login_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_login_time(), target);
  }

  // optional uint32 last_login_time = 8;
  if (_internal_has_last_login_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_last_login_time(), target);
  }

  // optional uint32 fresh_time = 9;
  if (_internal_has_fresh_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_fresh_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.UserInfoBase)
  return target;
}

size_t UserInfoBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.UserInfoBase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string user_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_name());
    }

    // optional string nick_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nick_name());
    }

    // optional uint32 ver = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ver());
    }

    // optional uint32 user_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
    }

    // optional uint32 reg_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_reg_time());
    }

    // optional uint32 from = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_from());
    }

    // optional uint32 login_time = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_login_time());
    }

    // optional uint32 last_login_time = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_last_login_time());
    }

  }
  // optional uint32 fresh_time = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_fresh_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserInfoBase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserInfoBase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserInfoBase::GetClassData() const { return &_class_data_; }

void UserInfoBase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserInfoBase *>(to)->MergeFrom(
      static_cast<const UserInfoBase &>(from));
}


void UserInfoBase::MergeFrom(const UserInfoBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.UserInfoBase)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_user_name(from._internal_user_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_nick_name(from._internal_nick_name());
    }
    if (cached_has_bits & 0x00000004u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000008u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      reg_time_ = from.reg_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      from_ = from.from_;
    }
    if (cached_has_bits & 0x00000040u) {
      login_time_ = from.login_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_login_time_ = from.last_login_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_fresh_time(from._internal_fresh_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfoBase::CopyFrom(const UserInfoBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.UserInfoBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoBase::IsInitialized() const {
  return true;
}

void UserInfoBase::InternalSwap(UserInfoBase* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_name_, lhs_arena,
      &other->user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nick_name_, lhs_arena,
      &other->nick_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserInfoBase, fresh_time_)
      + sizeof(UserInfoBase::fresh_time_)
      - PROTOBUF_FIELD_OFFSET(UserInfoBase, ver_)>(
          reinterpret_cast<char*>(&ver_),
          reinterpret_cast<char*>(&other->ver_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfoBase::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5finfo_5fbase_2eproto_getter, &descriptor_table_user_5finfo_5fbase_2eproto_once,
      file_level_metadata_user_5finfo_5fbase_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ssp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ssp::UserInfoBase* Arena::CreateMaybeMessage< ::ssp::UserInfoBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ssp::UserInfoBase >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
