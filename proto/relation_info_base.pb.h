// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: relation_info_base.proto

#ifndef PROTOBUF_INCLUDED_relation_5finfo_5fbase_2eproto
#define PROTOBUF_INCLUDED_relation_5finfo_5fbase_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_relation_5finfo_5fbase_2eproto 

namespace protobuf_relation_5finfo_5fbase_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_relation_5finfo_5fbase_2eproto
namespace ssp {
class RelationBase;
class RelationBaseDefaultTypeInternal;
extern RelationBaseDefaultTypeInternal _RelationBase_default_instance_;
}  // namespace ssp
namespace google {
namespace protobuf {
template<> ::ssp::RelationBase* Arena::CreateMaybeMessage<::ssp::RelationBase>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ssp {

// ===================================================================

class RelationBase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssp.RelationBase) */ {
 public:
  RelationBase();
  virtual ~RelationBase();

  RelationBase(const RelationBase& from);

  inline RelationBase& operator=(const RelationBase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RelationBase(RelationBase&& from) noexcept
    : RelationBase() {
    *this = ::std::move(from);
  }

  inline RelationBase& operator=(RelationBase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RelationBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelationBase* internal_default_instance() {
    return reinterpret_cast<const RelationBase*>(
               &_RelationBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RelationBase* other);
  friend void swap(RelationBase& a, RelationBase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RelationBase* New() const final {
    return CreateMaybeMessage<RelationBase>(NULL);
  }

  RelationBase* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RelationBase>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RelationBase& from);
  void MergeFrom(const RelationBase& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelationBase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 friend_user_id = 3;
  int friend_user_id_size() const;
  void clear_friend_user_id();
  static const int kFriendUserIdFieldNumber = 3;
  ::google::protobuf::int32 friend_user_id(int index) const;
  void set_friend_user_id(int index, ::google::protobuf::int32 value);
  void add_friend_user_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      friend_user_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_friend_user_id();

  // repeated int32 black_user_id = 4;
  int black_user_id_size() const;
  void clear_black_user_id();
  static const int kBlackUserIdFieldNumber = 4;
  ::google::protobuf::int32 black_user_id(int index) const;
  void set_black_user_id(int index, ::google::protobuf::int32 value);
  void add_black_user_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      black_user_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_black_user_id();

  // optional int32 ver = 1;
  bool has_ver() const;
  void clear_ver();
  static const int kVerFieldNumber = 1;
  ::google::protobuf::int32 ver() const;
  void set_ver(::google::protobuf::int32 value);

  // optional int32 user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int32 user_id() const;
  void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ssp.RelationBase)
 private:
  void set_has_ver();
  void clear_has_ver();
  void set_has_user_id();
  void clear_has_user_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > friend_user_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > black_user_id_;
  ::google::protobuf::int32 ver_;
  ::google::protobuf::int32 user_id_;
  friend struct ::protobuf_relation_5finfo_5fbase_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RelationBase

// optional int32 ver = 1;
inline bool RelationBase::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RelationBase::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RelationBase::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RelationBase::clear_ver() {
  ver_ = 0;
  clear_has_ver();
}
inline ::google::protobuf::int32 RelationBase::ver() const {
  // @@protoc_insertion_point(field_get:ssp.RelationBase.ver)
  return ver_;
}
inline void RelationBase::set_ver(::google::protobuf::int32 value) {
  set_has_ver();
  ver_ = value;
  // @@protoc_insertion_point(field_set:ssp.RelationBase.ver)
}

// optional int32 user_id = 2;
inline bool RelationBase::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RelationBase::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RelationBase::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RelationBase::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 RelationBase::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.RelationBase.user_id)
  return user_id_;
}
inline void RelationBase::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:ssp.RelationBase.user_id)
}

// repeated int32 friend_user_id = 3;
inline int RelationBase::friend_user_id_size() const {
  return friend_user_id_.size();
}
inline void RelationBase::clear_friend_user_id() {
  friend_user_id_.Clear();
}
inline ::google::protobuf::int32 RelationBase::friend_user_id(int index) const {
  // @@protoc_insertion_point(field_get:ssp.RelationBase.friend_user_id)
  return friend_user_id_.Get(index);
}
inline void RelationBase::set_friend_user_id(int index, ::google::protobuf::int32 value) {
  friend_user_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:ssp.RelationBase.friend_user_id)
}
inline void RelationBase::add_friend_user_id(::google::protobuf::int32 value) {
  friend_user_id_.Add(value);
  // @@protoc_insertion_point(field_add:ssp.RelationBase.friend_user_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RelationBase::friend_user_id() const {
  // @@protoc_insertion_point(field_list:ssp.RelationBase.friend_user_id)
  return friend_user_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RelationBase::mutable_friend_user_id() {
  // @@protoc_insertion_point(field_mutable_list:ssp.RelationBase.friend_user_id)
  return &friend_user_id_;
}

// repeated int32 black_user_id = 4;
inline int RelationBase::black_user_id_size() const {
  return black_user_id_.size();
}
inline void RelationBase::clear_black_user_id() {
  black_user_id_.Clear();
}
inline ::google::protobuf::int32 RelationBase::black_user_id(int index) const {
  // @@protoc_insertion_point(field_get:ssp.RelationBase.black_user_id)
  return black_user_id_.Get(index);
}
inline void RelationBase::set_black_user_id(int index, ::google::protobuf::int32 value) {
  black_user_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:ssp.RelationBase.black_user_id)
}
inline void RelationBase::add_black_user_id(::google::protobuf::int32 value) {
  black_user_id_.Add(value);
  // @@protoc_insertion_point(field_add:ssp.RelationBase.black_user_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RelationBase::black_user_id() const {
  // @@protoc_insertion_point(field_list:ssp.RelationBase.black_user_id)
  return black_user_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RelationBase::mutable_black_user_id() {
  // @@protoc_insertion_point(field_mutable_list:ssp.RelationBase.black_user_id)
  return &black_user_id_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ssp

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_relation_5finfo_5fbase_2eproto
