// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_define.proto

#include "message_define.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_message_5fdefine_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_5fdefine_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MessageBase;
}  // namespace protobuf_message_5fdefine_2eproto
namespace ssp {
class RegReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegReq>
      _instance;
} _RegReq_default_instance_;
class RegRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegRsp>
      _instance;
} _RegRsp_default_instance_;
class LoginReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginReq>
      _instance;
} _LoginReq_default_instance_;
class LoginRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginRsp>
      _instance;
} _LoginRsp_default_instance_;
class LogoutReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogoutReq>
      _instance;
} _LogoutReq_default_instance_;
class LogoutRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogoutRsp>
      _instance;
} _LogoutRsp_default_instance_;
class MessageBaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MessageBase>
      _instance;
} _MessageBase_default_instance_;
class PublishMessageReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishMessageReq>
      _instance;
} _PublishMessageReq_default_instance_;
class PublishMessageRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishMessageRsp>
      _instance;
} _PublishMessageRsp_default_instance_;
class GetMessageReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetMessageReq>
      _instance;
} _GetMessageReq_default_instance_;
class GetMessageRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetMessageRsp>
      _instance;
} _GetMessageRsp_default_instance_;
class GetPhotoReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetPhotoReq>
      _instance;
} _GetPhotoReq_default_instance_;
class GetPhotoRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetPhotoRsp>
      _instance;
} _GetPhotoRsp_default_instance_;
class AddFriendReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddFriendReq>
      _instance;
} _AddFriendReq_default_instance_;
class AddFriendRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddFriendRsp>
      _instance;
} _AddFriendRsp_default_instance_;
class DelFriendReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DelFriendReq>
      _instance;
} _DelFriendReq_default_instance_;
class DelFriendRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DelFriendRsp>
      _instance;
} _DelFriendRsp_default_instance_;
class AddBlackReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddBlackReq>
      _instance;
} _AddBlackReq_default_instance_;
class AddBlackRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddBlackRsp>
      _instance;
} _AddBlackRsp_default_instance_;
class DelBlackReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DelBlackReq>
      _instance;
} _DelBlackReq_default_instance_;
class DelBlackRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DelBlackRsp>
      _instance;
} _DelBlackRsp_default_instance_;
}  // namespace ssp
namespace protobuf_message_5fdefine_2eproto {
static void InitDefaultsRegReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_RegReq_default_instance_;
    new (ptr) ::ssp::RegReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::RegReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RegReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRegReq}, {}};

static void InitDefaultsRegRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_RegRsp_default_instance_;
    new (ptr) ::ssp::RegRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::RegRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RegRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRegRsp}, {}};

static void InitDefaultsLoginReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_LoginReq_default_instance_;
    new (ptr) ::ssp::LoginReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::LoginReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LoginReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLoginReq}, {}};

static void InitDefaultsLoginRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_LoginRsp_default_instance_;
    new (ptr) ::ssp::LoginRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::LoginRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LoginRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLoginRsp}, {}};

static void InitDefaultsLogoutReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_LogoutReq_default_instance_;
    new (ptr) ::ssp::LogoutReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::LogoutReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LogoutReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLogoutReq}, {}};

static void InitDefaultsLogoutRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_LogoutRsp_default_instance_;
    new (ptr) ::ssp::LogoutRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::LogoutRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LogoutRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLogoutRsp}, {}};

static void InitDefaultsMessageBase() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_MessageBase_default_instance_;
    new (ptr) ::ssp::MessageBase();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::MessageBase::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MessageBase =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMessageBase}, {}};

static void InitDefaultsPublishMessageReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_PublishMessageReq_default_instance_;
    new (ptr) ::ssp::PublishMessageReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::PublishMessageReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PublishMessageReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPublishMessageReq}, {}};

static void InitDefaultsPublishMessageRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_PublishMessageRsp_default_instance_;
    new (ptr) ::ssp::PublishMessageRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::PublishMessageRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PublishMessageRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPublishMessageRsp}, {}};

static void InitDefaultsGetMessageReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_GetMessageReq_default_instance_;
    new (ptr) ::ssp::GetMessageReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::GetMessageReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetMessageReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetMessageReq}, {}};

static void InitDefaultsGetMessageRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_GetMessageRsp_default_instance_;
    new (ptr) ::ssp::GetMessageRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::GetMessageRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetMessageRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetMessageRsp}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MessageBase.base,}};

static void InitDefaultsGetPhotoReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_GetPhotoReq_default_instance_;
    new (ptr) ::ssp::GetPhotoReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::GetPhotoReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetPhotoReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetPhotoReq}, {}};

static void InitDefaultsGetPhotoRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_GetPhotoRsp_default_instance_;
    new (ptr) ::ssp::GetPhotoRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::GetPhotoRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetPhotoRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetPhotoRsp}, {
      &protobuf_message_5fdefine_2eproto::scc_info_MessageBase.base,}};

static void InitDefaultsAddFriendReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_AddFriendReq_default_instance_;
    new (ptr) ::ssp::AddFriendReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::AddFriendReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddFriendReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddFriendReq}, {}};

static void InitDefaultsAddFriendRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_AddFriendRsp_default_instance_;
    new (ptr) ::ssp::AddFriendRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::AddFriendRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddFriendRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddFriendRsp}, {}};

static void InitDefaultsDelFriendReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_DelFriendReq_default_instance_;
    new (ptr) ::ssp::DelFriendReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::DelFriendReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DelFriendReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDelFriendReq}, {}};

static void InitDefaultsDelFriendRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_DelFriendRsp_default_instance_;
    new (ptr) ::ssp::DelFriendRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::DelFriendRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DelFriendRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDelFriendRsp}, {}};

static void InitDefaultsAddBlackReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_AddBlackReq_default_instance_;
    new (ptr) ::ssp::AddBlackReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::AddBlackReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddBlackReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddBlackReq}, {}};

static void InitDefaultsAddBlackRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_AddBlackRsp_default_instance_;
    new (ptr) ::ssp::AddBlackRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::AddBlackRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddBlackRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddBlackRsp}, {}};

static void InitDefaultsDelBlackReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_DelBlackReq_default_instance_;
    new (ptr) ::ssp::DelBlackReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::DelBlackReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DelBlackReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDelBlackReq}, {}};

static void InitDefaultsDelBlackRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssp::_DelBlackRsp_default_instance_;
    new (ptr) ::ssp::DelBlackRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssp::DelBlackRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DelBlackRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDelBlackRsp}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RegReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoginReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoginRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogoutReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogoutRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MessageBase.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PublishMessageReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PublishMessageRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetMessageReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetMessageRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetPhotoReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetPhotoRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddFriendReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddFriendRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DelFriendReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DelFriendRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddBlackReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddBlackRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DelBlackReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DelBlackRsp.base);
}

::google::protobuf::Metadata file_level_metadata[21];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegReq, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegReq, mess_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegReq, user_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegReq, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegReq, from_),
  2,
  3,
  0,
  1,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegRsp, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegRsp, mess_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegRsp, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::RegRsp, user_id_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginReq, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginReq, mess_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginReq, user_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginReq, password_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginRsp, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginRsp, mess_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginRsp, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LoginRsp, user_id_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LogoutReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LogoutReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LogoutReq, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LogoutReq, mess_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LogoutReq, user_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LogoutRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LogoutRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LogoutRsp, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LogoutRsp, mess_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::LogoutRsp, ret_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::MessageBase, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::MessageBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::MessageBase, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::MessageBase, message_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::MessageBase, publisher_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::MessageBase, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::MessageBase, publish_time_),
  1,
  2,
  3,
  0,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::PublishMessageReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::PublishMessageReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::PublishMessageReq, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::PublishMessageReq, mess_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::PublishMessageReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::PublishMessageReq, content_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::PublishMessageRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::PublishMessageRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::PublishMessageRsp, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::PublishMessageRsp, mess_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::PublishMessageRsp, ret_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetMessageReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetMessageReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetMessageReq, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetMessageReq, mess_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetMessageReq, user_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetMessageRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetMessageRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetMessageRsp, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetMessageRsp, mess_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetMessageRsp, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetMessageRsp, message_list_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetPhotoReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetPhotoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetPhotoReq, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetPhotoReq, mess_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetPhotoReq, user_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetPhotoRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetPhotoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetPhotoRsp, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetPhotoRsp, mess_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetPhotoRsp, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::GetPhotoRsp, last_message_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddFriendReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddFriendReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddFriendReq, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddFriendReq, mess_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddFriendReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddFriendReq, other_id_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddFriendRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddFriendRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddFriendRsp, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddFriendRsp, mess_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddFriendRsp, ret_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelFriendReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelFriendReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelFriendReq, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelFriendReq, mess_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelFriendReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelFriendReq, other_id_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelFriendRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelFriendRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelFriendRsp, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelFriendRsp, mess_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelFriendRsp, ret_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddBlackReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddBlackReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddBlackReq, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddBlackReq, mess_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddBlackReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddBlackReq, other_id_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddBlackRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddBlackRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddBlackRsp, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddBlackRsp, mess_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::AddBlackRsp, ret_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelBlackReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelBlackReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelBlackReq, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelBlackReq, mess_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelBlackReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelBlackReq, other_id_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelBlackRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelBlackRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelBlackRsp, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelBlackRsp, mess_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssp::DelBlackRsp, ret_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::ssp::RegReq)},
  { 15, 24, sizeof(::ssp::RegRsp)},
  { 28, 37, sizeof(::ssp::LoginReq)},
  { 41, 50, sizeof(::ssp::LoginRsp)},
  { 54, 62, sizeof(::ssp::LogoutReq)},
  { 65, 73, sizeof(::ssp::LogoutRsp)},
  { 76, 86, sizeof(::ssp::MessageBase)},
  { 91, 100, sizeof(::ssp::PublishMessageReq)},
  { 104, 112, sizeof(::ssp::PublishMessageRsp)},
  { 115, 123, sizeof(::ssp::GetMessageReq)},
  { 126, 135, sizeof(::ssp::GetMessageRsp)},
  { 139, 147, sizeof(::ssp::GetPhotoReq)},
  { 150, 159, sizeof(::ssp::GetPhotoRsp)},
  { 163, 172, sizeof(::ssp::AddFriendReq)},
  { 176, 184, sizeof(::ssp::AddFriendRsp)},
  { 187, 196, sizeof(::ssp::DelFriendReq)},
  { 200, 208, sizeof(::ssp::DelFriendRsp)},
  { 211, 220, sizeof(::ssp::AddBlackReq)},
  { 224, 232, sizeof(::ssp::AddBlackRsp)},
  { 235, 244, sizeof(::ssp::DelBlackReq)},
  { 248, 256, sizeof(::ssp::DelBlackRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_RegReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_RegRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_LoginReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_LoginRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_LogoutReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_LogoutRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_MessageBase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_PublishMessageReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_PublishMessageRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_GetMessageReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_GetMessageRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_GetPhotoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_GetPhotoRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_AddFriendReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_AddFriendRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_DelFriendReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_DelFriendRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_AddBlackReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_AddBlackRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_DelBlackReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssp::_DelBlackRsp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "message_define.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 21);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024message_define.proto\022\003ssp\"[\n\006RegReq\022\013\n"
      "\003ver\030\001 \001(\005\022\021\n\tmess_type\030\002 \001(\005\022\021\n\tuser_na"
      "me\030\003 \001(\t\022\020\n\010password\030\004 \001(\t\022\014\n\004from\030\005 \001(\005"
      "\"F\n\006RegRsp\022\013\n\003ver\030\001 \001(\005\022\021\n\tmess_type\030\002 \001"
      "(\005\022\013\n\003ret\030\003 \001(\005\022\017\n\007user_id\030\004 \001(\005\"O\n\010Logi"
      "nReq\022\013\n\003ver\030\001 \001(\005\022\021\n\tmess_type\030\002 \001(\005\022\021\n\t"
      "user_name\030\003 \001(\t\022\020\n\010password\030\004 \001(\t\"H\n\010Log"
      "inRsp\022\013\n\003ver\030\001 \001(\005\022\021\n\tmess_type\030\002 \001(\005\022\013\n"
      "\003ret\030\003 \001(\005\022\017\n\007user_id\030\004 \001(\005\"<\n\tLogoutReq"
      "\022\013\n\003ver\030\001 \001(\005\022\021\n\tmess_type\030\002 \001(\005\022\017\n\007user"
      "_id\030\003 \001(\005\"8\n\tLogoutRsp\022\013\n\003ver\030\001 \001(\005\022\021\n\tm"
      "ess_type\030\002 \001(\005\022\013\n\003ret\030\003 \001(\005\"h\n\013MessageBa"
      "se\022\013\n\003ver\030\001 \001(\005\022\022\n\nmessage_id\030\002 \001(\005\022\021\n\tp"
      "ublisher\030\003 \001(\005\022\017\n\007content\030\004 \001(\t\022\024\n\014publi"
      "sh_time\030\005 \001(\005\"U\n\021PublishMessageReq\022\013\n\003ve"
      "r\030\001 \001(\005\022\021\n\tmess_type\030\002 \001(\005\022\017\n\007user_id\030\003 "
      "\001(\005\022\017\n\007content\030\004 \001(\t\"@\n\021PublishMessageRs"
      "p\022\013\n\003ver\030\001 \001(\005\022\021\n\tmess_type\030\002 \001(\005\022\013\n\003ret"
      "\030\003 \001(\005\"@\n\rGetMessageReq\022\013\n\003ver\030\001 \001(\005\022\021\n\t"
      "mess_type\030\002 \001(\005\022\017\n\007user_id\030\003 \001(\005\"d\n\rGetM"
      "essageRsp\022\013\n\003ver\030\001 \001(\005\022\021\n\tmess_type\030\002 \001("
      "\005\022\013\n\003ret\030\003 \001(\005\022&\n\014message_list\030\004 \003(\0132\020.s"
      "sp.MessageBase\">\n\013GetPhotoReq\022\013\n\003ver\030\001 \001"
      "(\005\022\021\n\tmess_type\030\002 \001(\005\022\017\n\007user_id\030\003 \001(\005\"b"
      "\n\013GetPhotoRsp\022\013\n\003ver\030\001 \001(\005\022\021\n\tmess_type\030"
      "\002 \001(\005\022\013\n\003ret\030\003 \001(\005\022&\n\014last_message\030\004 \001(\013"
      "2\020.ssp.MessageBase\"Q\n\014AddFriendReq\022\013\n\003ve"
      "r\030\001 \001(\005\022\021\n\tmess_type\030\002 \001(\005\022\017\n\007user_id\030\003 "
      "\001(\005\022\020\n\010other_id\030\004 \001(\005\";\n\014AddFriendRsp\022\013\n"
      "\003ver\030\001 \001(\005\022\021\n\tmess_type\030\002 \001(\005\022\013\n\003ret\030\003 \001"
      "(\005\"Q\n\014DelFriendReq\022\013\n\003ver\030\001 \001(\005\022\021\n\tmess_"
      "type\030\002 \001(\005\022\017\n\007user_id\030\003 \001(\005\022\020\n\010other_id\030"
      "\004 \001(\005\";\n\014DelFriendRsp\022\013\n\003ver\030\001 \001(\005\022\021\n\tme"
      "ss_type\030\002 \001(\005\022\013\n\003ret\030\003 \001(\005\"P\n\013AddBlackRe"
      "q\022\013\n\003ver\030\001 \001(\005\022\021\n\tmess_type\030\002 \001(\005\022\017\n\007use"
      "r_id\030\003 \001(\005\022\020\n\010other_id\030\004 \001(\005\":\n\013AddBlack"
      "Rsp\022\013\n\003ver\030\001 \001(\005\022\021\n\tmess_type\030\002 \001(\005\022\013\n\003r"
      "et\030\003 \001(\005\"P\n\013DelBlackReq\022\013\n\003ver\030\001 \001(\005\022\021\n\t"
      "mess_type\030\002 \001(\005\022\017\n\007user_id\030\003 \001(\005\022\020\n\010othe"
      "r_id\030\004 \001(\005\":\n\013DelBlackRsp\022\013\n\003ver\030\001 \001(\005\022\021"
      "\n\tmess_type\030\002 \001(\005\022\013\n\003ret\030\003 \001(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1630);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message_define.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_message_5fdefine_2eproto
namespace ssp {

// ===================================================================

void RegReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegReq::kVerFieldNumber;
const int RegReq::kMessTypeFieldNumber;
const int RegReq::kUserNameFieldNumber;
const int RegReq::kPasswordFieldNumber;
const int RegReq::kFromFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegReq::RegReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_RegReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.RegReq)
}
RegReq::RegReq(const RegReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_name()) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&from_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(from_));
  // @@protoc_insertion_point(copy_constructor:ssp.RegReq)
}

void RegReq::SharedCtor() {
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(from_));
}

RegReq::~RegReq() {
  // @@protoc_insertion_point(destructor:ssp.RegReq)
  SharedDtor();
}

void RegReq::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RegReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RegReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegReq& RegReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_RegReq.base);
  return *internal_default_instance();
}


void RegReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.RegReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      user_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(from_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.RegReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mess_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mess_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mess_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), static_cast<int>(this->user_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssp.RegReq.user_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssp.RegReq.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 from = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_from();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.RegReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.RegReq)
  return false;
#undef DO_
}

void RegReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.RegReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ver(), output);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mess_type(), output);
  }

  // optional string user_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.RegReq.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_name(), output);
  }

  // optional string password = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.RegReq.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password(), output);
  }

  // optional int32 from = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->from(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.RegReq)
}

::google::protobuf::uint8* RegReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.RegReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ver(), target);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mess_type(), target);
  }

  // optional string user_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.RegReq.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }

  // optional string password = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.RegReq.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  // optional int32 from = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->from(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.RegReq)
  return target;
}

size_t RegReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.RegReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional int32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

    // optional int32 mess_type = 2;
    if (has_mess_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mess_type());
    }

    // optional int32 from = 5;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.RegReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RegReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.RegReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.RegReq)
    MergeFrom(*source);
  }
}

void RegReq::MergeFrom(const RegReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.RegReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_name();
      user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000008u) {
      mess_type_ = from.mess_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      from_ = from.from_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.RegReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegReq::CopyFrom(const RegReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.RegReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegReq::IsInitialized() const {
  return true;
}

void RegReq::Swap(RegReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegReq::InternalSwap(RegReq* other) {
  using std::swap;
  user_name_.Swap(&other->user_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ver_, other->ver_);
  swap(mess_type_, other->mess_type_);
  swap(from_, other->from_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegRsp::kVerFieldNumber;
const int RegRsp::kMessTypeFieldNumber;
const int RegRsp::kRetFieldNumber;
const int RegRsp::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegRsp::RegRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_RegRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.RegRsp)
}
RegRsp::RegRsp(const RegRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.RegRsp)
}

void RegRsp::SharedCtor() {
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
}

RegRsp::~RegRsp() {
  // @@protoc_insertion_point(destructor:ssp.RegRsp)
  SharedDtor();
}

void RegRsp::SharedDtor() {
}

void RegRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RegRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegRsp& RegRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_RegRsp.base);
  return *internal_default_instance();
}


void RegRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.RegRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_id_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.RegRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mess_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mess_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mess_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.RegRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.RegRsp)
  return false;
#undef DO_
}

void RegRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.RegRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ver(), output);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mess_type(), output);
  }

  // optional int32 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  // optional int32 user_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.RegRsp)
}

::google::protobuf::uint8* RegRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.RegRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ver(), target);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mess_type(), target);
  }

  // optional int32 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  // optional int32 user_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.RegRsp)
  return target;
}

size_t RegRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.RegRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

    // optional int32 mess_type = 2;
    if (has_mess_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mess_type());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.RegRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const RegRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.RegRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.RegRsp)
    MergeFrom(*source);
  }
}

void RegRsp::MergeFrom(const RegRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.RegRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      mess_type_ = from.mess_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000008u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.RegRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegRsp::CopyFrom(const RegRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.RegRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegRsp::IsInitialized() const {
  return true;
}

void RegRsp::Swap(RegRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegRsp::InternalSwap(RegRsp* other) {
  using std::swap;
  swap(ver_, other->ver_);
  swap(mess_type_, other->mess_type_);
  swap(ret_, other->ret_);
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginReq::kVerFieldNumber;
const int LoginReq::kMessTypeFieldNumber;
const int LoginReq::kUserNameFieldNumber;
const int LoginReq::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginReq::LoginReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_LoginReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.LoginReq)
}
LoginReq::LoginReq(const LoginReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_name()) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&mess_type_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(mess_type_));
  // @@protoc_insertion_point(copy_constructor:ssp.LoginReq)
}

void LoginReq::SharedCtor() {
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mess_type_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(mess_type_));
}

LoginReq::~LoginReq() {
  // @@protoc_insertion_point(destructor:ssp.LoginReq)
  SharedDtor();
}

void LoginReq::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LoginReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginReq& LoginReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_LoginReq.base);
  return *internal_default_instance();
}


void LoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.LoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      user_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mess_type_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(mess_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.LoginReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mess_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mess_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mess_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), static_cast<int>(this->user_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssp.LoginReq.user_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssp.LoginReq.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.LoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.LoginReq)
  return false;
#undef DO_
}

void LoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.LoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ver(), output);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mess_type(), output);
  }

  // optional string user_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.LoginReq.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_name(), output);
  }

  // optional string password = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.LoginReq.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.LoginReq)
}

::google::protobuf::uint8* LoginReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.LoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ver(), target);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mess_type(), target);
  }

  // optional string user_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.LoginReq.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }

  // optional string password = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.LoginReq.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.LoginReq)
  return target;
}

size_t LoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.LoginReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional int32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

    // optional int32 mess_type = 2;
    if (has_mess_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mess_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.LoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.LoginReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.LoginReq)
    MergeFrom(*source);
  }
}

void LoginReq::MergeFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.LoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_name();
      user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000008u) {
      mess_type_ = from.mess_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoginReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReq::CopyFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {
  return true;
}

void LoginReq::Swap(LoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginReq::InternalSwap(LoginReq* other) {
  using std::swap;
  user_name_.Swap(&other->user_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ver_, other->ver_);
  swap(mess_type_, other->mess_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LoginReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRsp::kVerFieldNumber;
const int LoginRsp::kMessTypeFieldNumber;
const int LoginRsp::kRetFieldNumber;
const int LoginRsp::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRsp::LoginRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_LoginRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.LoginRsp)
}
LoginRsp::LoginRsp(const LoginRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.LoginRsp)
}

void LoginRsp::SharedCtor() {
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
}

LoginRsp::~LoginRsp() {
  // @@protoc_insertion_point(destructor:ssp.LoginRsp)
  SharedDtor();
}

void LoginRsp::SharedDtor() {
}

void LoginRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LoginRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginRsp& LoginRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_LoginRsp.base);
  return *internal_default_instance();
}


void LoginRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.LoginRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_id_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.LoginRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mess_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mess_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mess_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.LoginRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.LoginRsp)
  return false;
#undef DO_
}

void LoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.LoginRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ver(), output);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mess_type(), output);
  }

  // optional int32 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  // optional int32 user_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.LoginRsp)
}

::google::protobuf::uint8* LoginRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.LoginRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ver(), target);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mess_type(), target);
  }

  // optional int32 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  // optional int32 user_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.LoginRsp)
  return target;
}

size_t LoginRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.LoginRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

    // optional int32 mess_type = 2;
    if (has_mess_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mess_type());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.LoginRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.LoginRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.LoginRsp)
    MergeFrom(*source);
  }
}

void LoginRsp::MergeFrom(const LoginRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.LoginRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      mess_type_ = from.mess_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000008u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.LoginRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRsp::CopyFrom(const LoginRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.LoginRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRsp::IsInitialized() const {
  return true;
}

void LoginRsp::Swap(LoginRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRsp::InternalSwap(LoginRsp* other) {
  using std::swap;
  swap(ver_, other->ver_);
  swap(mess_type_, other->mess_type_);
  swap(ret_, other->ret_);
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LoginRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogoutReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogoutReq::kVerFieldNumber;
const int LogoutReq::kMessTypeFieldNumber;
const int LogoutReq::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutReq::LogoutReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_LogoutReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.LogoutReq)
}
LogoutReq::LogoutReq(const LogoutReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.LogoutReq)
}

void LogoutReq::SharedCtor() {
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
}

LogoutReq::~LogoutReq() {
  // @@protoc_insertion_point(destructor:ssp.LogoutReq)
  SharedDtor();
}

void LogoutReq::SharedDtor() {
}

void LogoutReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LogoutReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogoutReq& LogoutReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_LogoutReq.base);
  return *internal_default_instance();
}


void LogoutReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.LogoutReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_id_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogoutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.LogoutReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mess_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mess_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mess_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.LogoutReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.LogoutReq)
  return false;
#undef DO_
}

void LogoutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.LogoutReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ver(), output);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mess_type(), output);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.LogoutReq)
}

::google::protobuf::uint8* LogoutReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.LogoutReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ver(), target);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mess_type(), target);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.LogoutReq)
  return target;
}

size_t LogoutReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.LogoutReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

    // optional int32 mess_type = 2;
    if (has_mess_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mess_type());
    }

    // optional int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogoutReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.LogoutReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogoutReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.LogoutReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.LogoutReq)
    MergeFrom(*source);
  }
}

void LogoutReq::MergeFrom(const LogoutReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.LogoutReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      mess_type_ = from.mess_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogoutReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.LogoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutReq::CopyFrom(const LogoutReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.LogoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutReq::IsInitialized() const {
  return true;
}

void LogoutReq::Swap(LogoutReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogoutReq::InternalSwap(LogoutReq* other) {
  using std::swap;
  swap(ver_, other->ver_);
  swap(mess_type_, other->mess_type_);
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LogoutReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogoutRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogoutRsp::kVerFieldNumber;
const int LogoutRsp::kMessTypeFieldNumber;
const int LogoutRsp::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutRsp::LogoutRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_LogoutRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.LogoutRsp)
}
LogoutRsp::LogoutRsp(const LogoutRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:ssp.LogoutRsp)
}

void LogoutRsp::SharedCtor() {
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(ret_));
}

LogoutRsp::~LogoutRsp() {
  // @@protoc_insertion_point(destructor:ssp.LogoutRsp)
  SharedDtor();
}

void LogoutRsp::SharedDtor() {
}

void LogoutRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LogoutRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogoutRsp& LogoutRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_LogoutRsp.base);
  return *internal_default_instance();
}


void LogoutRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.LogoutRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogoutRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.LogoutRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mess_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mess_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mess_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.LogoutRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.LogoutRsp)
  return false;
#undef DO_
}

void LogoutRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.LogoutRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ver(), output);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mess_type(), output);
  }

  // optional int32 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.LogoutRsp)
}

::google::protobuf::uint8* LogoutRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.LogoutRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ver(), target);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mess_type(), target);
  }

  // optional int32 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.LogoutRsp)
  return target;
}

size_t LogoutRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.LogoutRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

    // optional int32 mess_type = 2;
    if (has_mess_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mess_type());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogoutRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.LogoutRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogoutRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.LogoutRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.LogoutRsp)
    MergeFrom(*source);
  }
}

void LogoutRsp::MergeFrom(const LogoutRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.LogoutRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      mess_type_ = from.mess_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogoutRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.LogoutRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRsp::CopyFrom(const LogoutRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.LogoutRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRsp::IsInitialized() const {
  return true;
}

void LogoutRsp::Swap(LogoutRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogoutRsp::InternalSwap(LogoutRsp* other) {
  using std::swap;
  swap(ver_, other->ver_);
  swap(mess_type_, other->mess_type_);
  swap(ret_, other->ret_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LogoutRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MessageBase::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageBase::kVerFieldNumber;
const int MessageBase::kMessageIdFieldNumber;
const int MessageBase::kPublisherFieldNumber;
const int MessageBase::kContentFieldNumber;
const int MessageBase::kPublishTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageBase::MessageBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_MessageBase.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.MessageBase)
}
MessageBase::MessageBase(const MessageBase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&publish_time_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(publish_time_));
  // @@protoc_insertion_point(copy_constructor:ssp.MessageBase)
}

void MessageBase::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&publish_time_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(publish_time_));
}

MessageBase::~MessageBase() {
  // @@protoc_insertion_point(destructor:ssp.MessageBase)
  SharedDtor();
}

void MessageBase::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MessageBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MessageBase::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MessageBase& MessageBase::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_MessageBase.base);
  return *internal_default_instance();
}


void MessageBase::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.MessageBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    content_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&publish_time_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(publish_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MessageBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.MessageBase)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 message_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_message_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 publisher = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_publisher();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &publisher_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string content = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssp.MessageBase.content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 publish_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_publish_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &publish_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.MessageBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.MessageBase)
  return false;
#undef DO_
}

void MessageBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.MessageBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ver(), output);
  }

  // optional int32 message_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->message_id(), output);
  }

  // optional int32 publisher = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->publisher(), output);
  }

  // optional string content = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.MessageBase.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content(), output);
  }

  // optional int32 publish_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->publish_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.MessageBase)
}

::google::protobuf::uint8* MessageBase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.MessageBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ver(), target);
  }

  // optional int32 message_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->message_id(), target);
  }

  // optional int32 publisher = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->publisher(), target);
  }

  // optional string content = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.MessageBase.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // optional int32 publish_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->publish_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.MessageBase)
  return target;
}

size_t MessageBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.MessageBase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

    // optional int32 message_id = 2;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_id());
    }

    // optional int32 publisher = 3;
    if (has_publisher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->publisher());
    }

    // optional int32 publish_time = 5;
    if (has_publish_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->publish_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageBase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.MessageBase)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageBase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageBase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.MessageBase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.MessageBase)
    MergeFrom(*source);
  }
}

void MessageBase::MergeFrom(const MessageBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.MessageBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000002u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000004u) {
      message_id_ = from.message_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      publisher_ = from.publisher_;
    }
    if (cached_has_bits & 0x00000010u) {
      publish_time_ = from.publish_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MessageBase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.MessageBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageBase::CopyFrom(const MessageBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.MessageBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageBase::IsInitialized() const {
  return true;
}

void MessageBase::Swap(MessageBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageBase::InternalSwap(MessageBase* other) {
  using std::swap;
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ver_, other->ver_);
  swap(message_id_, other->message_id_);
  swap(publisher_, other->publisher_);
  swap(publish_time_, other->publish_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MessageBase::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublishMessageReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishMessageReq::kVerFieldNumber;
const int PublishMessageReq::kMessTypeFieldNumber;
const int PublishMessageReq::kUserIdFieldNumber;
const int PublishMessageReq::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishMessageReq::PublishMessageReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_PublishMessageReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.PublishMessageReq)
}
PublishMessageReq::PublishMessageReq(const PublishMessageReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.PublishMessageReq)
}

void PublishMessageReq::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
}

PublishMessageReq::~PublishMessageReq() {
  // @@protoc_insertion_point(destructor:ssp.PublishMessageReq)
  SharedDtor();
}

void PublishMessageReq::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PublishMessageReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PublishMessageReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishMessageReq& PublishMessageReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_PublishMessageReq.base);
  return *internal_default_instance();
}


void PublishMessageReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.PublishMessageReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    content_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_id_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PublishMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.PublishMessageReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mess_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mess_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mess_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string content = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ssp.PublishMessageReq.content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.PublishMessageReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.PublishMessageReq)
  return false;
#undef DO_
}

void PublishMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.PublishMessageReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ver(), output);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mess_type(), output);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_id(), output);
  }

  // optional string content = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.PublishMessageReq.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.PublishMessageReq)
}

::google::protobuf::uint8* PublishMessageReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.PublishMessageReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ver(), target);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mess_type(), target);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_id(), target);
  }

  // optional string content = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ssp.PublishMessageReq.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.PublishMessageReq)
  return target;
}

size_t PublishMessageReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.PublishMessageReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

    // optional int32 mess_type = 2;
    if (has_mess_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mess_type());
    }

    // optional int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.PublishMessageReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishMessageReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishMessageReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.PublishMessageReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.PublishMessageReq)
    MergeFrom(*source);
  }
}

void PublishMessageReq::MergeFrom(const PublishMessageReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.PublishMessageReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000002u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000004u) {
      mess_type_ = from.mess_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublishMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.PublishMessageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishMessageReq::CopyFrom(const PublishMessageReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.PublishMessageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishMessageReq::IsInitialized() const {
  return true;
}

void PublishMessageReq::Swap(PublishMessageReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishMessageReq::InternalSwap(PublishMessageReq* other) {
  using std::swap;
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ver_, other->ver_);
  swap(mess_type_, other->mess_type_);
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PublishMessageReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublishMessageRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishMessageRsp::kVerFieldNumber;
const int PublishMessageRsp::kMessTypeFieldNumber;
const int PublishMessageRsp::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishMessageRsp::PublishMessageRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_PublishMessageRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.PublishMessageRsp)
}
PublishMessageRsp::PublishMessageRsp(const PublishMessageRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:ssp.PublishMessageRsp)
}

void PublishMessageRsp::SharedCtor() {
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(ret_));
}

PublishMessageRsp::~PublishMessageRsp() {
  // @@protoc_insertion_point(destructor:ssp.PublishMessageRsp)
  SharedDtor();
}

void PublishMessageRsp::SharedDtor() {
}

void PublishMessageRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PublishMessageRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishMessageRsp& PublishMessageRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_PublishMessageRsp.base);
  return *internal_default_instance();
}


void PublishMessageRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.PublishMessageRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PublishMessageRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.PublishMessageRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mess_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mess_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mess_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.PublishMessageRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.PublishMessageRsp)
  return false;
#undef DO_
}

void PublishMessageRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.PublishMessageRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ver(), output);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mess_type(), output);
  }

  // optional int32 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.PublishMessageRsp)
}

::google::protobuf::uint8* PublishMessageRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.PublishMessageRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ver(), target);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mess_type(), target);
  }

  // optional int32 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.PublishMessageRsp)
  return target;
}

size_t PublishMessageRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.PublishMessageRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

    // optional int32 mess_type = 2;
    if (has_mess_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mess_type());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishMessageRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.PublishMessageRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishMessageRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishMessageRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.PublishMessageRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.PublishMessageRsp)
    MergeFrom(*source);
  }
}

void PublishMessageRsp::MergeFrom(const PublishMessageRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.PublishMessageRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      mess_type_ = from.mess_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublishMessageRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.PublishMessageRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishMessageRsp::CopyFrom(const PublishMessageRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.PublishMessageRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishMessageRsp::IsInitialized() const {
  return true;
}

void PublishMessageRsp::Swap(PublishMessageRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishMessageRsp::InternalSwap(PublishMessageRsp* other) {
  using std::swap;
  swap(ver_, other->ver_);
  swap(mess_type_, other->mess_type_);
  swap(ret_, other->ret_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PublishMessageRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetMessageReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMessageReq::kVerFieldNumber;
const int GetMessageReq::kMessTypeFieldNumber;
const int GetMessageReq::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMessageReq::GetMessageReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_GetMessageReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.GetMessageReq)
}
GetMessageReq::GetMessageReq(const GetMessageReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.GetMessageReq)
}

void GetMessageReq::SharedCtor() {
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
}

GetMessageReq::~GetMessageReq() {
  // @@protoc_insertion_point(destructor:ssp.GetMessageReq)
  SharedDtor();
}

void GetMessageReq::SharedDtor() {
}

void GetMessageReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetMessageReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetMessageReq& GetMessageReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_GetMessageReq.base);
  return *internal_default_instance();
}


void GetMessageReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.GetMessageReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_id_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.GetMessageReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mess_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mess_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mess_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.GetMessageReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.GetMessageReq)
  return false;
#undef DO_
}

void GetMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.GetMessageReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ver(), output);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mess_type(), output);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.GetMessageReq)
}

::google::protobuf::uint8* GetMessageReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.GetMessageReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ver(), target);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mess_type(), target);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.GetMessageReq)
  return target;
}

size_t GetMessageReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.GetMessageReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

    // optional int32 mess_type = 2;
    if (has_mess_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mess_type());
    }

    // optional int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.GetMessageReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMessageReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMessageReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.GetMessageReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.GetMessageReq)
    MergeFrom(*source);
  }
}

void GetMessageReq::MergeFrom(const GetMessageReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.GetMessageReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      mess_type_ = from.mess_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.GetMessageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMessageReq::CopyFrom(const GetMessageReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.GetMessageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMessageReq::IsInitialized() const {
  return true;
}

void GetMessageReq::Swap(GetMessageReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMessageReq::InternalSwap(GetMessageReq* other) {
  using std::swap;
  swap(ver_, other->ver_);
  swap(mess_type_, other->mess_type_);
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetMessageReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetMessageRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMessageRsp::kVerFieldNumber;
const int GetMessageRsp::kMessTypeFieldNumber;
const int GetMessageRsp::kRetFieldNumber;
const int GetMessageRsp::kMessageListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMessageRsp::GetMessageRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_GetMessageRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.GetMessageRsp)
}
GetMessageRsp::GetMessageRsp(const GetMessageRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      message_list_(from.message_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:ssp.GetMessageRsp)
}

void GetMessageRsp::SharedCtor() {
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(ret_));
}

GetMessageRsp::~GetMessageRsp() {
  // @@protoc_insertion_point(destructor:ssp.GetMessageRsp)
  SharedDtor();
}

void GetMessageRsp::SharedDtor() {
}

void GetMessageRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetMessageRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetMessageRsp& GetMessageRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_GetMessageRsp.base);
  return *internal_default_instance();
}


void GetMessageRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.GetMessageRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetMessageRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.GetMessageRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mess_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mess_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mess_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ssp.MessageBase message_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_message_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.GetMessageRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.GetMessageRsp)
  return false;
#undef DO_
}

void GetMessageRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.GetMessageRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ver(), output);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mess_type(), output);
  }

  // optional int32 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  // repeated .ssp.MessageBase message_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->message_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->message_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.GetMessageRsp)
}

::google::protobuf::uint8* GetMessageRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.GetMessageRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ver(), target);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mess_type(), target);
  }

  // optional int32 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  // repeated .ssp.MessageBase message_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->message_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->message_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.GetMessageRsp)
  return target;
}

size_t GetMessageRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.GetMessageRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ssp.MessageBase message_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->message_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->message_list(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

    // optional int32 mess_type = 2;
    if (has_mess_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mess_type());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMessageRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.GetMessageRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMessageRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMessageRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.GetMessageRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.GetMessageRsp)
    MergeFrom(*source);
  }
}

void GetMessageRsp::MergeFrom(const GetMessageRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.GetMessageRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  message_list_.MergeFrom(from.message_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      mess_type_ = from.mess_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetMessageRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.GetMessageRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMessageRsp::CopyFrom(const GetMessageRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.GetMessageRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMessageRsp::IsInitialized() const {
  return true;
}

void GetMessageRsp::Swap(GetMessageRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMessageRsp::InternalSwap(GetMessageRsp* other) {
  using std::swap;
  CastToBase(&message_list_)->InternalSwap(CastToBase(&other->message_list_));
  swap(ver_, other->ver_);
  swap(mess_type_, other->mess_type_);
  swap(ret_, other->ret_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetMessageRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetPhotoReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPhotoReq::kVerFieldNumber;
const int GetPhotoReq::kMessTypeFieldNumber;
const int GetPhotoReq::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPhotoReq::GetPhotoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_GetPhotoReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.GetPhotoReq)
}
GetPhotoReq::GetPhotoReq(const GetPhotoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.GetPhotoReq)
}

void GetPhotoReq::SharedCtor() {
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
}

GetPhotoReq::~GetPhotoReq() {
  // @@protoc_insertion_point(destructor:ssp.GetPhotoReq)
  SharedDtor();
}

void GetPhotoReq::SharedDtor() {
}

void GetPhotoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetPhotoReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPhotoReq& GetPhotoReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_GetPhotoReq.base);
  return *internal_default_instance();
}


void GetPhotoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.GetPhotoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_id_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetPhotoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.GetPhotoReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mess_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mess_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mess_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.GetPhotoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.GetPhotoReq)
  return false;
#undef DO_
}

void GetPhotoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.GetPhotoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ver(), output);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mess_type(), output);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.GetPhotoReq)
}

::google::protobuf::uint8* GetPhotoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.GetPhotoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ver(), target);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mess_type(), target);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.GetPhotoReq)
  return target;
}

size_t GetPhotoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.GetPhotoReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

    // optional int32 mess_type = 2;
    if (has_mess_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mess_type());
    }

    // optional int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPhotoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.GetPhotoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPhotoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPhotoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.GetPhotoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.GetPhotoReq)
    MergeFrom(*source);
  }
}

void GetPhotoReq::MergeFrom(const GetPhotoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.GetPhotoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      mess_type_ = from.mess_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetPhotoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.GetPhotoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPhotoReq::CopyFrom(const GetPhotoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.GetPhotoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPhotoReq::IsInitialized() const {
  return true;
}

void GetPhotoReq::Swap(GetPhotoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPhotoReq::InternalSwap(GetPhotoReq* other) {
  using std::swap;
  swap(ver_, other->ver_);
  swap(mess_type_, other->mess_type_);
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetPhotoReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetPhotoRsp::InitAsDefaultInstance() {
  ::ssp::_GetPhotoRsp_default_instance_._instance.get_mutable()->last_message_ = const_cast< ::ssp::MessageBase*>(
      ::ssp::MessageBase::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPhotoRsp::kVerFieldNumber;
const int GetPhotoRsp::kMessTypeFieldNumber;
const int GetPhotoRsp::kRetFieldNumber;
const int GetPhotoRsp::kLastMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPhotoRsp::GetPhotoRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_GetPhotoRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.GetPhotoRsp)
}
GetPhotoRsp::GetPhotoRsp(const GetPhotoRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_last_message()) {
    last_message_ = new ::ssp::MessageBase(*from.last_message_);
  } else {
    last_message_ = NULL;
  }
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:ssp.GetPhotoRsp)
}

void GetPhotoRsp::SharedCtor() {
  ::memset(&last_message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&last_message_)) + sizeof(ret_));
}

GetPhotoRsp::~GetPhotoRsp() {
  // @@protoc_insertion_point(destructor:ssp.GetPhotoRsp)
  SharedDtor();
}

void GetPhotoRsp::SharedDtor() {
  if (this != internal_default_instance()) delete last_message_;
}

void GetPhotoRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetPhotoRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetPhotoRsp& GetPhotoRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_GetPhotoRsp.base);
  return *internal_default_instance();
}


void GetPhotoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.GetPhotoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(last_message_ != NULL);
    last_message_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetPhotoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.GetPhotoRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mess_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mess_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mess_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ssp.MessageBase last_message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.GetPhotoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.GetPhotoRsp)
  return false;
#undef DO_
}

void GetPhotoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.GetPhotoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ver(), output);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mess_type(), output);
  }

  // optional int32 ret = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  // optional .ssp.MessageBase last_message = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_last_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.GetPhotoRsp)
}

::google::protobuf::uint8* GetPhotoRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.GetPhotoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ver(), target);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mess_type(), target);
  }

  // optional int32 ret = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  // optional .ssp.MessageBase last_message = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_last_message(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.GetPhotoRsp)
  return target;
}

size_t GetPhotoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.GetPhotoRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .ssp.MessageBase last_message = 4;
    if (has_last_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *last_message_);
    }

    // optional int32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

    // optional int32 mess_type = 2;
    if (has_mess_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mess_type());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPhotoRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.GetPhotoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPhotoRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPhotoRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.GetPhotoRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.GetPhotoRsp)
    MergeFrom(*source);
  }
}

void GetPhotoRsp::MergeFrom(const GetPhotoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.GetPhotoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_last_message()->::ssp::MessageBase::MergeFrom(from.last_message());
    }
    if (cached_has_bits & 0x00000002u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000004u) {
      mess_type_ = from.mess_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetPhotoRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.GetPhotoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPhotoRsp::CopyFrom(const GetPhotoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.GetPhotoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPhotoRsp::IsInitialized() const {
  return true;
}

void GetPhotoRsp::Swap(GetPhotoRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPhotoRsp::InternalSwap(GetPhotoRsp* other) {
  using std::swap;
  swap(last_message_, other->last_message_);
  swap(ver_, other->ver_);
  swap(mess_type_, other->mess_type_);
  swap(ret_, other->ret_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetPhotoRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddFriendReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddFriendReq::kVerFieldNumber;
const int AddFriendReq::kMessTypeFieldNumber;
const int AddFriendReq::kUserIdFieldNumber;
const int AddFriendReq::kOtherIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddFriendReq::AddFriendReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_AddFriendReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.AddFriendReq)
}
AddFriendReq::AddFriendReq(const AddFriendReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&other_id_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(other_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.AddFriendReq)
}

void AddFriendReq::SharedCtor() {
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&other_id_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(other_id_));
}

AddFriendReq::~AddFriendReq() {
  // @@protoc_insertion_point(destructor:ssp.AddFriendReq)
  SharedDtor();
}

void AddFriendReq::SharedDtor() {
}

void AddFriendReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddFriendReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddFriendReq& AddFriendReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_AddFriendReq.base);
  return *internal_default_instance();
}


void AddFriendReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.AddFriendReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&other_id_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(other_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.AddFriendReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mess_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mess_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mess_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 other_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_other_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &other_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.AddFriendReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.AddFriendReq)
  return false;
#undef DO_
}

void AddFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.AddFriendReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ver(), output);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mess_type(), output);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_id(), output);
  }

  // optional int32 other_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->other_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.AddFriendReq)
}

::google::protobuf::uint8* AddFriendReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.AddFriendReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ver(), target);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mess_type(), target);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_id(), target);
  }

  // optional int32 other_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->other_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.AddFriendReq)
  return target;
}

size_t AddFriendReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.AddFriendReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

    // optional int32 mess_type = 2;
    if (has_mess_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mess_type());
    }

    // optional int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // optional int32 other_id = 4;
    if (has_other_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->other_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.AddFriendReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFriendReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddFriendReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.AddFriendReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.AddFriendReq)
    MergeFrom(*source);
  }
}

void AddFriendReq::MergeFrom(const AddFriendReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.AddFriendReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      mess_type_ = from.mess_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      other_id_ = from.other_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.AddFriendReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendReq::CopyFrom(const AddFriendReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.AddFriendReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendReq::IsInitialized() const {
  return true;
}

void AddFriendReq::Swap(AddFriendReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddFriendReq::InternalSwap(AddFriendReq* other) {
  using std::swap;
  swap(ver_, other->ver_);
  swap(mess_type_, other->mess_type_);
  swap(user_id_, other->user_id_);
  swap(other_id_, other->other_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddFriendReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddFriendRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddFriendRsp::kVerFieldNumber;
const int AddFriendRsp::kMessTypeFieldNumber;
const int AddFriendRsp::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddFriendRsp::AddFriendRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_AddFriendRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.AddFriendRsp)
}
AddFriendRsp::AddFriendRsp(const AddFriendRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:ssp.AddFriendRsp)
}

void AddFriendRsp::SharedCtor() {
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(ret_));
}

AddFriendRsp::~AddFriendRsp() {
  // @@protoc_insertion_point(destructor:ssp.AddFriendRsp)
  SharedDtor();
}

void AddFriendRsp::SharedDtor() {
}

void AddFriendRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddFriendRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddFriendRsp& AddFriendRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_AddFriendRsp.base);
  return *internal_default_instance();
}


void AddFriendRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.AddFriendRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddFriendRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.AddFriendRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mess_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mess_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mess_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.AddFriendRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.AddFriendRsp)
  return false;
#undef DO_
}

void AddFriendRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.AddFriendRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ver(), output);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mess_type(), output);
  }

  // optional int32 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.AddFriendRsp)
}

::google::protobuf::uint8* AddFriendRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.AddFriendRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ver(), target);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mess_type(), target);
  }

  // optional int32 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.AddFriendRsp)
  return target;
}

size_t AddFriendRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.AddFriendRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

    // optional int32 mess_type = 2;
    if (has_mess_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mess_type());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddFriendRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.AddFriendRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AddFriendRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddFriendRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.AddFriendRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.AddFriendRsp)
    MergeFrom(*source);
  }
}

void AddFriendRsp::MergeFrom(const AddFriendRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.AddFriendRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      mess_type_ = from.mess_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddFriendRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.AddFriendRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendRsp::CopyFrom(const AddFriendRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.AddFriendRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendRsp::IsInitialized() const {
  return true;
}

void AddFriendRsp::Swap(AddFriendRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddFriendRsp::InternalSwap(AddFriendRsp* other) {
  using std::swap;
  swap(ver_, other->ver_);
  swap(mess_type_, other->mess_type_);
  swap(ret_, other->ret_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddFriendRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DelFriendReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelFriendReq::kVerFieldNumber;
const int DelFriendReq::kMessTypeFieldNumber;
const int DelFriendReq::kUserIdFieldNumber;
const int DelFriendReq::kOtherIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelFriendReq::DelFriendReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_DelFriendReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.DelFriendReq)
}
DelFriendReq::DelFriendReq(const DelFriendReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&other_id_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(other_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.DelFriendReq)
}

void DelFriendReq::SharedCtor() {
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&other_id_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(other_id_));
}

DelFriendReq::~DelFriendReq() {
  // @@protoc_insertion_point(destructor:ssp.DelFriendReq)
  SharedDtor();
}

void DelFriendReq::SharedDtor() {
}

void DelFriendReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DelFriendReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelFriendReq& DelFriendReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_DelFriendReq.base);
  return *internal_default_instance();
}


void DelFriendReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.DelFriendReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&other_id_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(other_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.DelFriendReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mess_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mess_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mess_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 other_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_other_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &other_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.DelFriendReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.DelFriendReq)
  return false;
#undef DO_
}

void DelFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.DelFriendReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ver(), output);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mess_type(), output);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_id(), output);
  }

  // optional int32 other_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->other_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.DelFriendReq)
}

::google::protobuf::uint8* DelFriendReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.DelFriendReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ver(), target);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mess_type(), target);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_id(), target);
  }

  // optional int32 other_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->other_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.DelFriendReq)
  return target;
}

size_t DelFriendReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.DelFriendReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

    // optional int32 mess_type = 2;
    if (has_mess_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mess_type());
    }

    // optional int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // optional int32 other_id = 4;
    if (has_other_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->other_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.DelFriendReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DelFriendReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelFriendReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.DelFriendReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.DelFriendReq)
    MergeFrom(*source);
  }
}

void DelFriendReq::MergeFrom(const DelFriendReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.DelFriendReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      mess_type_ = from.mess_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      other_id_ = from.other_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.DelFriendReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelFriendReq::CopyFrom(const DelFriendReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.DelFriendReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelFriendReq::IsInitialized() const {
  return true;
}

void DelFriendReq::Swap(DelFriendReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelFriendReq::InternalSwap(DelFriendReq* other) {
  using std::swap;
  swap(ver_, other->ver_);
  swap(mess_type_, other->mess_type_);
  swap(user_id_, other->user_id_);
  swap(other_id_, other->other_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DelFriendReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DelFriendRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelFriendRsp::kVerFieldNumber;
const int DelFriendRsp::kMessTypeFieldNumber;
const int DelFriendRsp::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelFriendRsp::DelFriendRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_DelFriendRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.DelFriendRsp)
}
DelFriendRsp::DelFriendRsp(const DelFriendRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:ssp.DelFriendRsp)
}

void DelFriendRsp::SharedCtor() {
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(ret_));
}

DelFriendRsp::~DelFriendRsp() {
  // @@protoc_insertion_point(destructor:ssp.DelFriendRsp)
  SharedDtor();
}

void DelFriendRsp::SharedDtor() {
}

void DelFriendRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DelFriendRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelFriendRsp& DelFriendRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_DelFriendRsp.base);
  return *internal_default_instance();
}


void DelFriendRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.DelFriendRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelFriendRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.DelFriendRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mess_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mess_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mess_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.DelFriendRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.DelFriendRsp)
  return false;
#undef DO_
}

void DelFriendRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.DelFriendRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ver(), output);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mess_type(), output);
  }

  // optional int32 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.DelFriendRsp)
}

::google::protobuf::uint8* DelFriendRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.DelFriendRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ver(), target);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mess_type(), target);
  }

  // optional int32 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.DelFriendRsp)
  return target;
}

size_t DelFriendRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.DelFriendRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

    // optional int32 mess_type = 2;
    if (has_mess_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mess_type());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelFriendRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.DelFriendRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DelFriendRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelFriendRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.DelFriendRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.DelFriendRsp)
    MergeFrom(*source);
  }
}

void DelFriendRsp::MergeFrom(const DelFriendRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.DelFriendRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      mess_type_ = from.mess_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelFriendRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.DelFriendRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelFriendRsp::CopyFrom(const DelFriendRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.DelFriendRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelFriendRsp::IsInitialized() const {
  return true;
}

void DelFriendRsp::Swap(DelFriendRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelFriendRsp::InternalSwap(DelFriendRsp* other) {
  using std::swap;
  swap(ver_, other->ver_);
  swap(mess_type_, other->mess_type_);
  swap(ret_, other->ret_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DelFriendRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddBlackReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddBlackReq::kVerFieldNumber;
const int AddBlackReq::kMessTypeFieldNumber;
const int AddBlackReq::kUserIdFieldNumber;
const int AddBlackReq::kOtherIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddBlackReq::AddBlackReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_AddBlackReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.AddBlackReq)
}
AddBlackReq::AddBlackReq(const AddBlackReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&other_id_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(other_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.AddBlackReq)
}

void AddBlackReq::SharedCtor() {
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&other_id_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(other_id_));
}

AddBlackReq::~AddBlackReq() {
  // @@protoc_insertion_point(destructor:ssp.AddBlackReq)
  SharedDtor();
}

void AddBlackReq::SharedDtor() {
}

void AddBlackReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddBlackReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddBlackReq& AddBlackReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_AddBlackReq.base);
  return *internal_default_instance();
}


void AddBlackReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.AddBlackReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&other_id_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(other_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddBlackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.AddBlackReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mess_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mess_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mess_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 other_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_other_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &other_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.AddBlackReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.AddBlackReq)
  return false;
#undef DO_
}

void AddBlackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.AddBlackReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ver(), output);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mess_type(), output);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_id(), output);
  }

  // optional int32 other_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->other_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.AddBlackReq)
}

::google::protobuf::uint8* AddBlackReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.AddBlackReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ver(), target);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mess_type(), target);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_id(), target);
  }

  // optional int32 other_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->other_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.AddBlackReq)
  return target;
}

size_t AddBlackReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.AddBlackReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

    // optional int32 mess_type = 2;
    if (has_mess_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mess_type());
    }

    // optional int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // optional int32 other_id = 4;
    if (has_other_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->other_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddBlackReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.AddBlackReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AddBlackReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddBlackReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.AddBlackReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.AddBlackReq)
    MergeFrom(*source);
  }
}

void AddBlackReq::MergeFrom(const AddBlackReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.AddBlackReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      mess_type_ = from.mess_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      other_id_ = from.other_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddBlackReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.AddBlackReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBlackReq::CopyFrom(const AddBlackReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.AddBlackReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBlackReq::IsInitialized() const {
  return true;
}

void AddBlackReq::Swap(AddBlackReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddBlackReq::InternalSwap(AddBlackReq* other) {
  using std::swap;
  swap(ver_, other->ver_);
  swap(mess_type_, other->mess_type_);
  swap(user_id_, other->user_id_);
  swap(other_id_, other->other_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddBlackReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddBlackRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddBlackRsp::kVerFieldNumber;
const int AddBlackRsp::kMessTypeFieldNumber;
const int AddBlackRsp::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddBlackRsp::AddBlackRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_AddBlackRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.AddBlackRsp)
}
AddBlackRsp::AddBlackRsp(const AddBlackRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:ssp.AddBlackRsp)
}

void AddBlackRsp::SharedCtor() {
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(ret_));
}

AddBlackRsp::~AddBlackRsp() {
  // @@protoc_insertion_point(destructor:ssp.AddBlackRsp)
  SharedDtor();
}

void AddBlackRsp::SharedDtor() {
}

void AddBlackRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddBlackRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddBlackRsp& AddBlackRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_AddBlackRsp.base);
  return *internal_default_instance();
}


void AddBlackRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.AddBlackRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddBlackRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.AddBlackRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mess_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mess_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mess_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.AddBlackRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.AddBlackRsp)
  return false;
#undef DO_
}

void AddBlackRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.AddBlackRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ver(), output);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mess_type(), output);
  }

  // optional int32 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.AddBlackRsp)
}

::google::protobuf::uint8* AddBlackRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.AddBlackRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ver(), target);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mess_type(), target);
  }

  // optional int32 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.AddBlackRsp)
  return target;
}

size_t AddBlackRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.AddBlackRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

    // optional int32 mess_type = 2;
    if (has_mess_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mess_type());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddBlackRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.AddBlackRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AddBlackRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddBlackRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.AddBlackRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.AddBlackRsp)
    MergeFrom(*source);
  }
}

void AddBlackRsp::MergeFrom(const AddBlackRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.AddBlackRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      mess_type_ = from.mess_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddBlackRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.AddBlackRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBlackRsp::CopyFrom(const AddBlackRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.AddBlackRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBlackRsp::IsInitialized() const {
  return true;
}

void AddBlackRsp::Swap(AddBlackRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddBlackRsp::InternalSwap(AddBlackRsp* other) {
  using std::swap;
  swap(ver_, other->ver_);
  swap(mess_type_, other->mess_type_);
  swap(ret_, other->ret_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddBlackRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DelBlackReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelBlackReq::kVerFieldNumber;
const int DelBlackReq::kMessTypeFieldNumber;
const int DelBlackReq::kUserIdFieldNumber;
const int DelBlackReq::kOtherIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelBlackReq::DelBlackReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_DelBlackReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.DelBlackReq)
}
DelBlackReq::DelBlackReq(const DelBlackReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&other_id_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(other_id_));
  // @@protoc_insertion_point(copy_constructor:ssp.DelBlackReq)
}

void DelBlackReq::SharedCtor() {
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&other_id_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(other_id_));
}

DelBlackReq::~DelBlackReq() {
  // @@protoc_insertion_point(destructor:ssp.DelBlackReq)
  SharedDtor();
}

void DelBlackReq::SharedDtor() {
}

void DelBlackReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DelBlackReq::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelBlackReq& DelBlackReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_DelBlackReq.base);
  return *internal_default_instance();
}


void DelBlackReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.DelBlackReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&other_id_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(other_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelBlackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.DelBlackReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mess_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mess_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mess_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 other_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_other_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &other_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.DelBlackReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.DelBlackReq)
  return false;
#undef DO_
}

void DelBlackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.DelBlackReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ver(), output);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mess_type(), output);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_id(), output);
  }

  // optional int32 other_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->other_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.DelBlackReq)
}

::google::protobuf::uint8* DelBlackReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.DelBlackReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ver(), target);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mess_type(), target);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_id(), target);
  }

  // optional int32 other_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->other_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.DelBlackReq)
  return target;
}

size_t DelBlackReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.DelBlackReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

    // optional int32 mess_type = 2;
    if (has_mess_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mess_type());
    }

    // optional int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // optional int32 other_id = 4;
    if (has_other_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->other_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelBlackReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.DelBlackReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DelBlackReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelBlackReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.DelBlackReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.DelBlackReq)
    MergeFrom(*source);
  }
}

void DelBlackReq::MergeFrom(const DelBlackReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.DelBlackReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      mess_type_ = from.mess_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      other_id_ = from.other_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelBlackReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.DelBlackReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelBlackReq::CopyFrom(const DelBlackReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.DelBlackReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelBlackReq::IsInitialized() const {
  return true;
}

void DelBlackReq::Swap(DelBlackReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelBlackReq::InternalSwap(DelBlackReq* other) {
  using std::swap;
  swap(ver_, other->ver_);
  swap(mess_type_, other->mess_type_);
  swap(user_id_, other->user_id_);
  swap(other_id_, other->other_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DelBlackReq::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DelBlackRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelBlackRsp::kVerFieldNumber;
const int DelBlackRsp::kMessTypeFieldNumber;
const int DelBlackRsp::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelBlackRsp::DelBlackRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_5fdefine_2eproto::scc_info_DelBlackRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssp.DelBlackRsp)
}
DelBlackRsp::DelBlackRsp(const DelBlackRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ver_, &from.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&ver_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:ssp.DelBlackRsp)
}

void DelBlackRsp::SharedCtor() {
  ::memset(&ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&ver_)) + sizeof(ret_));
}

DelBlackRsp::~DelBlackRsp() {
  // @@protoc_insertion_point(destructor:ssp.DelBlackRsp)
  SharedDtor();
}

void DelBlackRsp::SharedDtor() {
}

void DelBlackRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DelBlackRsp::descriptor() {
  ::protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelBlackRsp& DelBlackRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_5fdefine_2eproto::scc_info_DelBlackRsp.base);
  return *internal_default_instance();
}


void DelBlackRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:ssp.DelBlackRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&ver_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelBlackRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssp.DelBlackRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mess_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mess_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mess_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssp.DelBlackRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssp.DelBlackRsp)
  return false;
#undef DO_
}

void DelBlackRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssp.DelBlackRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ver(), output);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mess_type(), output);
  }

  // optional int32 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssp.DelBlackRsp)
}

::google::protobuf::uint8* DelBlackRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssp.DelBlackRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ver(), target);
  }

  // optional int32 mess_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mess_type(), target);
  }

  // optional int32 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssp.DelBlackRsp)
  return target;
}

size_t DelBlackRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssp.DelBlackRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

    // optional int32 mess_type = 2;
    if (has_mess_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mess_type());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelBlackRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssp.DelBlackRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DelBlackRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelBlackRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssp.DelBlackRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssp.DelBlackRsp)
    MergeFrom(*source);
  }
}

void DelBlackRsp::MergeFrom(const DelBlackRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssp.DelBlackRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      mess_type_ = from.mess_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelBlackRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssp.DelBlackRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelBlackRsp::CopyFrom(const DelBlackRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssp.DelBlackRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelBlackRsp::IsInitialized() const {
  return true;
}

void DelBlackRsp::Swap(DelBlackRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelBlackRsp::InternalSwap(DelBlackRsp* other) {
  using std::swap;
  swap(ver_, other->ver_);
  swap(mess_type_, other->mess_type_);
  swap(ret_, other->ret_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DelBlackRsp::GetMetadata() const {
  protobuf_message_5fdefine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_5fdefine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ssp
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::RegReq* Arena::CreateMaybeMessage< ::ssp::RegReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::RegReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::RegRsp* Arena::CreateMaybeMessage< ::ssp::RegRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::RegRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::LoginReq* Arena::CreateMaybeMessage< ::ssp::LoginReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::LoginReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::LoginRsp* Arena::CreateMaybeMessage< ::ssp::LoginRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::LoginRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::LogoutReq* Arena::CreateMaybeMessage< ::ssp::LogoutReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::LogoutReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::LogoutRsp* Arena::CreateMaybeMessage< ::ssp::LogoutRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::LogoutRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::MessageBase* Arena::CreateMaybeMessage< ::ssp::MessageBase >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::MessageBase >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::PublishMessageReq* Arena::CreateMaybeMessage< ::ssp::PublishMessageReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::PublishMessageReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::PublishMessageRsp* Arena::CreateMaybeMessage< ::ssp::PublishMessageRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::PublishMessageRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::GetMessageReq* Arena::CreateMaybeMessage< ::ssp::GetMessageReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::GetMessageReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::GetMessageRsp* Arena::CreateMaybeMessage< ::ssp::GetMessageRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::GetMessageRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::GetPhotoReq* Arena::CreateMaybeMessage< ::ssp::GetPhotoReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::GetPhotoReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::GetPhotoRsp* Arena::CreateMaybeMessage< ::ssp::GetPhotoRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::GetPhotoRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::AddFriendReq* Arena::CreateMaybeMessage< ::ssp::AddFriendReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::AddFriendReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::AddFriendRsp* Arena::CreateMaybeMessage< ::ssp::AddFriendRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::AddFriendRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::DelFriendReq* Arena::CreateMaybeMessage< ::ssp::DelFriendReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::DelFriendReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::DelFriendRsp* Arena::CreateMaybeMessage< ::ssp::DelFriendRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::DelFriendRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::AddBlackReq* Arena::CreateMaybeMessage< ::ssp::AddBlackReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::AddBlackReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::AddBlackRsp* Arena::CreateMaybeMessage< ::ssp::AddBlackRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::AddBlackRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::DelBlackReq* Arena::CreateMaybeMessage< ::ssp::DelBlackReq >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::DelBlackReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssp::DelBlackRsp* Arena::CreateMaybeMessage< ::ssp::DelBlackRsp >(Arena* arena) {
  return Arena::CreateInternal< ::ssp::DelBlackRsp >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
